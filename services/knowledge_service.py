import json
import os
import logging
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)

class KnowledgeService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.base_path = "knowledge_base"
        self.load_all_knowledge()
    
    def load_all_knowledge(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã
            with open(f"{self.base_path}/prices.json", 'r', encoding='utf-8') as f:
                self.prices = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
            with open(f"{self.base_path}/faq.json", 'r', encoding='utf-8') as f:
                self.faq = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏
            with open(f"{self.base_path}/services.json", 'r', encoding='utf-8') as f:
                self.services = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
            with open(f"{self.base_path}/company_info.json", 'r', encoding='utf-8') as f:
                self.company_info = json.load(f)
            
            logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.prices = {}
            self.faq = {}
            self.services = {}
            self.company_info = {}
    
    def get_prices_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            packages = self.prices.get('packages', [])
            additional_services = self.prices.get('additional_services', [])
            
            result = "üí∞ –ü–ê–ö–ï–¢–´ –ò –¶–ï–ù–´:\n\n"
            
            for package in packages:
                result += f"üéØ {package['name']}\n"
                result += f"üíµ {package['price']}\n"
                result += f"‚è± {package['timeline']}\n"
                result += f"üìù {package['description']}\n"
                result += "–í–∫–ª—é—á–∞–µ—Ç:\n"
                for feature in package['features']:
                    result += f"‚Ä¢ {feature}\n"
                result += "\n"
            
            result += "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò:\n"
            for service in additional_services:
                result += f"‚Ä¢ {service['name']}: {service['price']} - {service['description']}\n"
            
            result += "\nüí≥ –£–°–õ–û–í–ò–Ø –û–ü–õ–ê–¢–´:\n"
            for term in self.prices.get('payment_terms', []):
                result += f"‚Ä¢ {term}\n"
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö: {e}")
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    def get_faq_answer(self, question: str) -> Optional[str]:
        """–ò—â–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ FAQ"""
        try:
            question_lower = question.lower()
            faq_list = self.faq.get('frequently_asked_questions', [])
            
            for item in faq_list:
                if any(keyword in question_lower for keyword in item['question'].lower().split()[:3]):
                    return item['answer']
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ FAQ: {e}")
            return None
    
    def get_service_details(self, service_name: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
        try:
            services = self.services.get('detailed_services', {})
            
            result = ""
            for key, service in services.items():
                if service_name == "all" or service_name.lower() in service['title'].lower():
                    result += f"====== {service['title']}\n\n"
                    result += f"{service['description']}\n\n"
                    result += "‚ö° –í–ö–õ–Æ–ß–ê–ï–¢:\n"
                    for feature in service['features']:
                        result += f"‚Ä¢ {feature}\n"
                    
                    if 'technologies' in service:
                        result += "\nüîß –¢–ï–•–ù–û–õ–û–ì–ò–ò:\n"
                        for tech in service['technologies']:
                            result += f"‚Ä¢ {tech}\n"
                    
                    if 'supported_platforms' in service:
                        result += "\nüì± –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–õ–ê–¢–§–û–†–ú–´:\n"
                        for platform in service['supported_platforms']:
                            result += f"‚Ä¢ {platform}\n"
                    
                    if 'supported_crm' in service:
                        result += "\nüìä –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CRM:\n"
                        for crm in service['supported_crm']:
                            result += f"‚Ä¢ {crm}\n"

                    result += f"\n\n"
                    
                
            
            if result:
                result = "üõ† –ù–ê–®–ò –£–°–õ–£–ì–ò::\n\n" + result
                return result
            else:
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ: {e}")
            return None
    
    def get_company_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            company = self.company_info.get('company', {})
            
            result = f"üè¢ {company.get('name', 'RD-Studio')}\n\n"
            result += f"üéØ {company.get('specialization', '')}\n\n"
            
            result += "üìà –ù–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n"
            for achievement in company.get('achievements', []):
                result += f"‚Ä¢ {achievement}\n"
            
            result += "\nüë• –ù–ê–®–ê –ö–û–ú–ê–ù–î–ê:\n"
            team = company.get('team', {})
            for role, description in team.items():
                result += f"‚Ä¢ {description}\n"
            
            result += "\n‚ù§Ô∏è –ù–ê–®–ò –¶–ï–ù–ù–û–°–¢–ò:\n"
            for value in company.get('values', []):
                result += f"‚Ä¢ {value}\n"
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    def search_knowledge(self, query: str) -> Optional[str]:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        query_lower = query.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–∞–º
        if any(keyword in query_lower for keyword in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–ø—Ä–∞–π—Å', '—Ç–∞—Ä–∏—Ñ']):
            return self.get_prices_info()
        
        # –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª—É–≥–∞–º
        service_keywords = {
            '–ª–µ–Ω–¥–∏–Ω–≥': 'landing_page',
            '—Å–∞–π—Ç': 'landing_page',
            '–±–æ—Ç': 'ai_assistant',
            '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç': 'ai_assistant',
            'crm': 'crm_integration',
            '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è': 'crm_integration'
        }
        
        for keyword, service_key in service_keywords.items():
            if keyword in query_lower:
                result = self.get_service_details(service_key)
                if result:
                    return result
        
        # –ü–æ–∏—Å–∫ –≤ FAQ
        faq_answer = self.get_faq_answer(query)
        if faq_answer:
            return faq_answer
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
        if any(keyword in query_lower for keyword in ['–∫–æ–º–ø–∞–Ω–∏—è', '–æ –Ω–∞—Å', 'rd-studio', '—Å—Ç—É–¥–∏']):
            return self.get_company_info()
        
        return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
knowledge_service = KnowledgeService()